{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","Header","props","classes","className","AppBar","Toolbar","Typography","variant","noWrap","styles","input","marginBottom","App","handleScriptLoad","options","autocompleteOrigin","google","maps","places","Autocomplete","document","getElementById","autocompleteDestination","setFields","addListener","handlePlaceSelect_origin","handlePlaceSelect_destination","handleInputChange","e","target","value","type","checked","name","setState","addressObject","getPlace","address_components","destination","formatted_address","dest_googled","origin","origin_googled","state","isLoading","weathers","preventDefault","this","trim","console","log","axios","post","headers","then","res","data","endpoint","process","listItems","map","w","idx","observations","location","ListItem","key","feedCreation","ListItemText","primary","observation","temperature","description","secondary","city","country","latitude","longitude","url","onLoad","noValidate","autoComplete","TextField","id","placeholder","onChange","bind","style","fullWidth","Button","onClick","handleSubmit","disabled","CircularProgress","size","List","dense","Component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ab6dde1.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1,\n    display: \"none\",\n    [theme.breakpoints.up(\"xs\")]: {\n      display: \"block\"\n    }\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: 120,\n      \"&:focus\": {\n        width: 200\n      }\n    }\n  }\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            {props.title}\n          </Typography>\n          {/* <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </div> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Script from \"react-load-script\";\nimport {\n  TextField,\n  Button,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport FiberManualRecordOutlinedIcon from \"@material-ui/icons/FiberManualRecordOutlined\";\nimport PlaceIcon from \"@material-ui/icons/Place\";\n\nimport axios from \"axios\";\n\n// components\nimport Header from \"./components/Header\";\nconst styles = {\n  // button: {\n  //   background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n  //   borderRadius: 3,\n  //   border: 0,\n  //   color: \"white\",\n  //   height: 48,\n  //   padding: \"0 30px\",\n  //   boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\"\n  // },\n  // buttonBlue: {\n  //   background: \"linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)\",\n  //   boxShadow: \"0 3px 5px 2px rgba(33, 203, 243, .30)\"\n  // }\n  input: {\n    // width: 400,\n    marginBottom: 10,\n    marginLeft: 5\n  }\n};\n\nclass App extends Component {\n  // Define Constructor\n  constructor(props) {\n    super(props);\n\n    // Declare State\n    this.state = {\n      origin: \"\",\n      destination: \"\",\n      origin_googled: false,\n      dest_googled: false,\n      isLoading: false,\n      weathers: null\n    };\n  }\n\n  handleScriptLoad = () => {\n    // Declare Options For Autocomplete\n    const options = {\n      // types: [\"(cities)\"]\n    }; // To disable any eslint 'google not defined' errors\n\n    // Initialize Google Autocomplete\n    /*global google*/\n\n    this.autocompleteOrigin = new google.maps.places.Autocomplete(\n      document.getElementById(\"auto_origin\"),\n      options\n    );\n\n    this.autocompleteDestination = new google.maps.places.Autocomplete(\n      document.getElementById(\"auto_destination\"),\n      options\n    );\n\n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components and formatted\n    // address.\n    this.autocompleteOrigin.setFields([\n      \"address_components\",\n      \"formatted_address\"\n    ]);\n\n    this.autocompleteDestination.setFields([\n      \"address_components\",\n      \"formatted_address\"\n    ]);\n\n    // Fire Event when a suggested name is selected\n    this.autocompleteOrigin.addListener(\n      \"place_changed\",\n      this.handlePlaceSelect_origin\n    );\n\n    this.autocompleteDestination.addListener(\n      \"place_changed\",\n      this.handlePlaceSelect_destination\n    );\n  };\n\n  handleInputChange = e => {\n    const target = e.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    if (name === \"origin\") {\n      this.setState({ [name]: value, origin_googled: false });\n    } else if (name === \"destination\") {\n      this.setState({ [name]: value, dest_googled: false });\n    }\n  };\n\n  handlePlaceSelect_destination = () => {\n    const addressObject = this.autocompleteDestination.getPlace();\n\n    const address = addressObject.address_components;\n\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState({\n        destination: addressObject.formatted_address,\n        dest_googled: true\n      });\n    }\n  };\n\n  handlePlaceSelect_origin = () => {\n    // Extract City From Address Object\n\n    const addressObject = this.autocompleteOrigin.getPlace();\n\n    const address = addressObject.address_components;\n\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState({\n        origin: addressObject.formatted_address,\n        origin_googled: true\n      });\n    }\n  };\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.setState({\n      origin: this.state.origin.trim(),\n      destination: this.state.destination.trim(),\n      isLoading: true,\n      weathers: null\n    });\n\n    const { origin, destination, origin_googled, dest_googled } = this.state;\n\n    if (!origin_googled || !dest_googled) {\n      // TODO: shake input and tell user what's wrong?\n      this.setState({\n        isLoading: false\n      });\n      console.log(\"can't submit\");\n      console.log(this.state);\n\n      return;\n    }\n\n    axios\n      .post(\n        `https://us-central1-snow-alert-262619.cloudfunctions.net/snowAlert`,\n        {\n          origin,\n          destination\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(res => {\n        console.log(res.data);\n        this.setState({ weathers: res.data, isLoading: false });\n      });\n  }\n\n  render() {\n    const { weathers, isLoading } = this.state;\n    const { classes } = this.props;\n\n    const endpoint = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_PLACES_API_KEY}&libraries=places`;\n    let listItems = null;\n    if (weathers !== null) {\n      listItems = weathers.map((w, idx) => {\n        let res = w.observations.location[0];\n        return (\n          <ListItem key={`${idx}` + w.feedCreation}>\n            <ListItemText\n              // metric, default is Celsius\n              primary={`Â°C ${res.observation[0].temperature} ${res.observation[0].description}`}\n              secondary={`${res.city}, ${res.state}, ${res.country}(${res.observation[0].latitude},${res.observation[0].longitude})`}\n            />\n          </ListItem>\n        );\n      });\n    }\n    return (\n      <>\n        <Header title=\"Weather on your route\"></Header>\n        <Script url={endpoint} onLoad={this.handleScriptLoad} />\n        <br />\n        <form noValidate autoComplete=\"off\">\n          <div>\n            <FiberManualRecordOutlinedIcon />\n            <TextField\n              id=\"auto_origin\"\n              placeholder=\"origin\"\n              value={this.state.origin}\n              name=\"origin\"\n              onChange={this.handleInputChange.bind(this)}\n              style={styles.input}\n              fullWidth\n            ></TextField>\n          </div>\n          <div>\n            <PlaceIcon />\n            <TextField\n              id=\"auto_destination\"\n              placeholder=\"destination\"\n              value={this.state.destination}\n              name=\"destination\"\n              onChange={this.handleInputChange.bind(this)}\n              style={styles.input}\n              fullWidth\n            ></TextField>\n          </div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={this.handleSubmit.bind(this)}\n            disabled={isLoading}\n          >\n            get weathers on the route\n          </Button>\n          {isLoading && <CircularProgress size={24} />}\n        </form>\n        <div>\n          <List dense={false}>{listItems}</List>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}